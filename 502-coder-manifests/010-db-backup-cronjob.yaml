apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: coder
spec:
  schedule: "0 17 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
            - name: dump
              image: postgres:16
              command:
                - "sh"
                - "-c"
                - |
                  export PGPASSWORD=$PG_PASS
                  echo === dumping database ===
                  pg_dump -v -h $PG_HOST -p ${PG_PORT:-5432} -U $PG_USER -d $PG_DATABASE > /data/dump.sql
              volumeMounts:
                - name: workdir
                  mountPath: /data
              envFrom:
                - configMapRef:
                    name: coder-postgres-backup

            - name: zip
              image: busybox:latest
              command:
                - "sh"
                - "-c"
                - |
                  echo === zipping dumpfile ===
                  cd /data
                  tar -czvf dump.tar.gz dump.sql
              volumeMounts:
                - name: workdir
                  mountPath: /data

            - name: upload
              image: amazon/aws-cli:latest
              command:
                - "sh"
                - "-c"
                - |
                  echo === uploading dumpfile ===
                  OBJECT_KEY=coder/postgres-dump-$(date +'%Y.%m.%d').tar.gz
                  aws s3api --endpoint-url ${S3_ENDPOINT} put-object --bucket ${BUCKET_NAME} --key $OBJECT_KEY --body /data/dump.tar.gz
              envFrom:
                - configMapRef:
                    name: coder-postgres-backup
              volumeMounts:
                - name: workdir
                  mountPath: /data

          containers:
            - name: postgres-backup
              image: curlimages/curl:latest
              command:
                - sh
                - -c
                - |
                  echo backup complete
                  MSG="SUCCESS: coder/backup-postgres"
                  curl -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                    -H "Content-Type: application/json" \
                    -d "{\"chat_id\":${TELEGRAM_CHAT_ID},\"disable_notification\":true,\"text\":\"${MSG}\"}"
              envFrom:
                - configMapRef:
                    name: coder-postgres-backup
          restartPolicy: Never
          volumes:
            - name: workdir
              emptyDir: {}
